name: Deploy Solidity

on:
  workflow_dispatch:

jobs:
  build-deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20'

      - name: Install dependencies
        run: npm install

      - name: Install Foundry
        uses: foundry-rs/foundry-toolchain@v1
        with:
          version: 'nightly'

      - name: "Build Solidity contracts"
        run: forge build --root ./agent-template

      - name: "Debug: list files"
        run: |
          echo "PWD: $(pwd)"
          ls -la
          ls -la agent-template || true
          ls -la agent-template/script || true

      - name: "Show Deploy.s.sol"
        run: sed -n '1,200p' agent-template/script/Deploy.s.sol || true

      - name: "Check Deploy.s.sol exists"
        run: test -f agent-template/script/Deploy.s.sol || (echo "Deploy.s.sol missing" && exit 1)

      - name: "Check PRIVATE_KEY secret present"
        env:
          PRIVATE_KEY: ${{ secrets.PRIVATE_KEY }}
        run: |
          if [ -z "$PRIVATE_KEY" ]; then
            echo "ERROR: PRIVATE_KEY is empty or not set in secrets"
            exit 1
          else
            echo "PRIVATE_KEY is present (value not shown)"
          fi

      - name: "Deploy to Testnet/Mainnet"
        working-directory: ./agent-template
        env:
          SOMNIA_RPC_URL: ${{ secrets.SOMNIA_RPC_URL }}
          # Ensure PRIVATE_KEY has 0x prefix so vm.envUint can parse it
          PRIVATE_KEY: ${{ format('0x{0}', secrets.PRIVATE_KEY) }}
        run: |
          # run from inside agent-template to avoid path/root mismatches
          set -euo pipefail
          echo "Installing jq for JSON inspection..."
          sudo apt-get update -y && sudo apt-get install -y jq || true

          echo "Running forge script..."
          # Run forge script but don't let a non-zero exit immediately stop our diagnostics
          set +e
          forge script script/Deploy.s.sol:Deploy --rpc-url "$SOMNIA_RPC_URL" --private-key "$PRIVATE_KEY" --broadcast --verify --root .
          rc=$?
          set -e

          # Find most recent run-latest.json under broadcast/
          rl=$(find broadcast -type f -name run-latest.json -print -quit || true)
          if [ -n "$rl" ] && [ -f "$rl" ]; then
            echo "Found broadcast artifact: $rl"
            echo "--- broadcast content (truncated) ---"
            head -n 200 "$rl" || true
            echo "--- end truncated ---"

            # Inspect receipts/transactions for success status (status==1) or contractAddress presence
            success=false
            # Check receipts
            if jq -e '(.receipts // []) | any(.status == 1 or .contractAddress != null)' "$rl" >/dev/null 2>&1; then
              success=true
            fi
            # Check transactions as fallback
            if [ "$success" = false ]; then
              if jq -e '(.transactions // []) | any(.status == 1 or .contractAddress != null)' "$rl" >/dev/null 2>&1; then
                success=true
              fi
            fi

            if [ "$success" = true ]; then
              echo "At least one broadcasted transaction appears successful. Proceeding (rc=$rc)."
              exit 0
            else
              echo "No successful broadcasts detected in run-latest.json. Forge exit code: $rc"
              echo "Full broadcast file:"
              jq '.' "$rl" || true
              # Exit with original rc (non-zero) to indicate CI failure
              exit $rc
            fi
          else
            echo "No broadcast run-latest.json found. Forge exit code: $rc"
            if [ $rc -ne 0 ]; then
              echo "Forge failed and no broadcast artifacts found. Failing CI."
              exit $rc
            fi
            echo "Forge exited with code 0 but no broadcast file was generated. Continuing."
          fi

      - name: "Verify contract (optional)"
        run: echo 'Contract verification not implemented. Add forge verify-contract command here.'
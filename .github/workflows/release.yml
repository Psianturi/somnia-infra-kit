name: Release and Publish

on:
  push:
    branches: [main]
    paths:
      - 'package.json'
      - 'commands/**'
      - 'agent-template/**'
      - 'templates/**'

permissions:
  contents: write
  packages: write

jobs:
  check-version:
    runs-on: ubuntu-latest
    outputs:
      version-changed: ${{ steps.check.outputs.changed }}
      new-version: ${{ steps.check.outputs.version }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 2

      - name: Check if version changed
        id: check
        run: |
          CURRENT_VERSION=$(node -p "require('./package.json').version")
          PREVIOUS_VERSION=$(git show HEAD~1:package.json | node -p "JSON.parse(require('fs').readFileSync('/dev/stdin', 'utf8')).version")
          
          if [ "$CURRENT_VERSION" != "$PREVIOUS_VERSION" ]; then
            echo "changed=true" >> $GITHUB_OUTPUT
            echo "version=$CURRENT_VERSION" >> $GITHUB_OUTPUT
            echo "Version changed from $PREVIOUS_VERSION to $CURRENT_VERSION"
          else
            echo "changed=false" >> $GITHUB_OUTPUT
            echo "Version unchanged: $CURRENT_VERSION"
          fi

  test-and-release:
    needs: check-version
    if: needs.check-version.outputs.version-changed == 'true'
    runs-on: ubuntu-latest
    permissions:
      contents: write
      packages: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          registry-url: 'https://registry.npmjs.org/'

      - name: Install dependencies
        run: npm install

      - name: Run tests
        run: npm test

      - name: Check and Create Git Tag
        id: create-tag
        run: |
          VERSION="v${{ needs.check-version.outputs.new-version }}"
          
          # Check if tag already exists locally
          if git tag -l "$VERSION" | grep -q "$VERSION"; then
            echo "Tag $VERSION already exists locally, deleting..."
            git tag -d "$VERSION"
          fi
          
          # Check if tag exists on remote
          if git ls-remote --tags origin | grep -q "refs/tags/$VERSION"; then
            echo "Tag $VERSION already exists on remote"
            echo "tag-exists=true" >> $GITHUB_OUTPUT
          else
            echo "Creating new tag $VERSION"
            git config --local user.email "action@github.com"
            git config --local user.name "GitHub Action"
            git tag "$VERSION"
            git push origin "$VERSION"
            echo "tag-exists=false" >> $GITHUB_OUTPUT
          fi

      - name: Create Release
        if: steps.create-tag.outputs.tag-exists == 'false'
        uses: softprops/action-gh-release@v1
        with:
          tag_name: v${{ needs.check-version.outputs.new-version }}
          name: Release v${{ needs.check-version.outputs.new-version }}
          body: |
            ## Changes in v${{ needs.check-version.outputs.new-version }}
            
            - Template path resolution fixes for global installation
            - Improved error handling and debugging
            - Enhanced CLI functionality
            
            ### Installation
            ```bash
            npm install -g somnia-ai-agent-cli@${{ needs.check-version.outputs.new-version }}
            ```
            
            ### Quick Start
            ```bash
            somnia-cli init MyAgent
            cd MyAgent
            somnia-cli config
            somnia-cli test
            somnia-cli deploy
            ```
          draft: false
          prerelease: false

      - name: Handle existing tag
        if: steps.create-tag.outputs.tag-exists == 'true'
        run: |
          echo "⚠️ Tag v${{ needs.check-version.outputs.new-version }} already exists"
          echo "Skipping release creation, proceeding with NPM publish check"

      - name: Check if version already published
        id: check-npm
        run: |
          VERSION=$(node -p "require('./package.json').version")
          if npm view somnia-ai-agent-cli@$VERSION version 2>/dev/null; then
            echo "Version $VERSION already published to NPM"
            echo "should-publish=false" >> $GITHUB_OUTPUT
          else
            echo "Version $VERSION ready to publish"
            echo "should-publish=true" >> $GITHUB_OUTPUT
          fi

      - name: Publish to npm
        if: steps.check-npm.outputs.should-publish == 'true'
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
        run: |
          npm publish --access public
          echo "✅ Successfully published v${{ needs.check-version.outputs.new-version }} to NPM"

      - name: Update README badge
        run: |
          echo "✅ Released v${{ needs.check-version.outputs.new-version }} successfully!"
          echo "📦 NPM: https://www.npmjs.com/package/somnia-ai-agent-cli"
          echo "🏷️ GitHub: https://github.com/Psianturi/somnia-infra-kit/releases/tag/v${{ needs.check-version.outputs.new-version }}"